// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filedag-project/filedag-storage/dag/pool/client (interfaces: PoolClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	blocks "github.com/ipfs/go-block-format"
	cid "github.com/ipfs/go-cid"
)

// MockPoolClient is a mock of PoolClient interface.
type MockPoolClient struct {
	ctrl     *gomock.Controller
	recorder *MockPoolClientMockRecorder
}

// MockPoolClientMockRecorder is the mock recorder for MockPoolClient.
type MockPoolClientMockRecorder struct {
	mock *MockPoolClient
}

// NewMockPoolClient creates a new mock instance.
func NewMockPoolClient(ctrl *gomock.Controller) *MockPoolClient {
	mock := &MockPoolClient{ctrl: ctrl}
	mock.recorder = &MockPoolClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolClient) EXPECT() *MockPoolClientMockRecorder {
	return m.recorder
}

// AllKeysChan mocks base method.
func (m *MockPoolClient) AllKeysChan(arg0 context.Context) (<-chan cid.Cid, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllKeysChan", arg0)
	ret0, _ := ret[0].(<-chan cid.Cid)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllKeysChan indicates an expected call of AllKeysChan.
func (mr *MockPoolClientMockRecorder) AllKeysChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllKeysChan", reflect.TypeOf((*MockPoolClient)(nil).AllKeysChan), arg0)
}

// Close mocks base method.
func (m *MockPoolClient) Close(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *MockPoolClientMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPoolClient)(nil).Close), arg0)
}

// DeleteBlock mocks base method.
func (m *MockPoolClient) DeleteBlock(arg0 context.Context, arg1 cid.Cid) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlock indicates an expected call of DeleteBlock.
func (mr *MockPoolClientMockRecorder) DeleteBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlock", reflect.TypeOf((*MockPoolClient)(nil).DeleteBlock), arg0, arg1)
}

// Get mocks base method.
func (m *MockPoolClient) Get(arg0 context.Context, arg1 cid.Cid) (blocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(blocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolClientMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPoolClient)(nil).Get), arg0, arg1)
}

// GetSize mocks base method.
func (m *MockPoolClient) GetSize(arg0 context.Context, arg1 cid.Cid) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSize", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSize indicates an expected call of GetSize.
func (mr *MockPoolClientMockRecorder) GetSize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSize", reflect.TypeOf((*MockPoolClient)(nil).GetSize), arg0, arg1)
}

// Has mocks base method.
func (m *MockPoolClient) Has(arg0 context.Context, arg1 cid.Cid) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockPoolClientMockRecorder) Has(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockPoolClient)(nil).Has), arg0, arg1)
}

// HashOnRead mocks base method.
func (m *MockPoolClient) HashOnRead(arg0 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HashOnRead", arg0)
}

// HashOnRead indicates an expected call of HashOnRead.
func (mr *MockPoolClientMockRecorder) HashOnRead(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashOnRead", reflect.TypeOf((*MockPoolClient)(nil).HashOnRead), arg0)
}

// Put mocks base method.
func (m *MockPoolClient) Put(arg0 context.Context, arg1 blocks.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockPoolClientMockRecorder) Put(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockPoolClient)(nil).Put), arg0, arg1)
}

// PutMany mocks base method.
func (m *MockPoolClient) PutMany(arg0 context.Context, arg1 []blocks.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMany", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMany indicates an expected call of PutMany.
func (mr *MockPoolClientMockRecorder) PutMany(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMany", reflect.TypeOf((*MockPoolClient)(nil).PutMany), arg0, arg1)
}
